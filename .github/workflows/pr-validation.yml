name: PR Validation

on:
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "tests/**"
      - "samples/**"
      - "*.sln"
      - "*.csproj"
      - ".github/workflows/pr-validation.yml"

env:
  OPENVINO_VERSION: "2025.2.0.0"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache OpenVINO Runtime
        id: cache-openvino
        uses: actions/cache@v3
        with:
          path: build/native/openvino_genai_windows_${{ env.OPENVINO_VERSION }}_x86_64
          key: openvino-runtime-${{ env.OPENVINO_VERSION }}

      - name: Download OpenVINO Runtime
        if: steps.cache-openvino.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Downloading OpenVINO GenAI Runtime $env:OPENVINO_VERSION..."
          $outputPath = "build/native"
          New-Item -ItemType Directory -Force -Path $outputPath

          $url = "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/windows/openvino_genai_windows_${env:OPENVINO_VERSION}_x86_64.zip"
          $zipPath = "$outputPath/openvino_genai.zip"

          Write-Host "URL: $url"
          Write-Host "Output path: $zipPath"

          try {
            # Use WebClient instead of Invoke-WebRequest for better compatibility
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($url, $zipPath)
            $webClient.Dispose()
            
            Write-Host "Download completed successfully"
            
            Write-Host "Extracting archive..."
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $outputPath)
            Remove-Item $zipPath
            
            Write-Host "OpenVINO Runtime downloaded and extracted successfully"
          }
          catch {
            Write-Host "Error downloading OpenVINO runtime: $_"
            Write-Host "Error details: $($_.Exception.Message)"
            exit 1
          }

      - name: Setup OpenVINO DLLs
        shell: pwsh
        run: |
          $runtimePath = "build/native/openvino_genai_windows_${env:OPENVINO_VERSION}_x86_64/runtime"
          $targetPath = "build/native/runtimes/win-x64/native"

          New-Item -ItemType Directory -Force -Path $targetPath

          # Copy Release DLLs
          Copy-Item "$runtimePath/bin/intel64/Release/*.dll" -Destination $targetPath -Force
          Copy-Item "$runtimePath/3rdparty/tbb/bin/*.dll" -Destination $targetPath -Force

          Write-Host "Copied $(Get-ChildItem $targetPath -Filter *.dll | Measure-Object).Count DLL files"

      - name: Build OpenVINO GenAI C++ Wrapper
        shell: pwsh
        run: |
          Write-Host "Building OpenVINO GenAI C++ wrapper..."

          # Set up build directory
          $buildDir = "build/native/wrapper"
          New-Item -ItemType Directory -Force -Path $buildDir

          # Set paths
          $openvinoPath = "build/native/openvino_genai_windows_${env:OPENVINO_VERSION}_x86_64"
          $targetPath = "build/native/runtimes/win-x64/native"

          # Debug: List directory structure
          Write-Host "OpenVINO directory structure:"
          Get-ChildItem -Path $openvinoPath -Recurse -Name | Where-Object { $_ -like "*cmake*" -or $_ -like "*Config*" } | Sort-Object

          # Set environment variable for CMake
          $env:OPENVINO_GENAI_ROOT = $openvinoPath

          # Configure CMake with simplified paths
          cmake -S src/native -B $buildDir `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="$openvinoPath"

          # Build the wrapper
          cmake --build $buildDir --config Release

          # Copy the wrapper DLL to the target directory
          Copy-Item "$buildDir/Release/openvino_genai_c.dll" -Destination $targetPath -Force

          Write-Host "OpenVINO GenAI wrapper built and copied successfully"

      - name: Restore dependencies
        run: dotnet restore OpenVINO.NET.sln

      - name: Build solution
        run: dotnet build OpenVINO.NET.sln --configuration Release --no-restore /p:TreatWarningsAsErrors=true
        env:
          CI: true

      - name: Run unit tests
        run: |
          dotnet test tests/OpenVINO.NET.GenAI.Tests/OpenVINO.NET.GenAI.Tests.csproj `
            --configuration Release `
            --no-build `
            --verbosity normal `
            --logger "trx;LogFileName=test-results.trx" `
            --collect:"XPlat Code Coverage" `
            --results-directory ./TestResults `
            --filter "FullyQualifiedName!~WhisperIntegrationTests"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/

      - name: Test Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: .NET Test Results
          path: TestResults/*.trx
          reporter: dotnet-trx
          fail-on-error: true

      - name: Code Coverage Report
        if: false # Disabled: Container action not supported on Windows runners
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage PR Comment
        if: false # Disabled: Depends on code coverage report
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md

  code-quality:
    name: Code Quality Checks
    runs-on: windows-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore OpenVINO.NET.sln

      - name: Check formatting
        run: dotnet format OpenVINO.NET.sln --verify-no-changes --verbosity diagnostic

      - name: Run code analysis
        run: |
          dotnet build OpenVINO.NET.sln --configuration Release /p:EnableNETAnalyzers=true /p:AnalysisMode=AllEnabledByDefault

  test-custom-dll:
    name: Test Custom DLL Creation (x64)
    runs-on: windows-latest
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache OpenVINO Runtime
        id: cache-openvino-dll
        uses: actions/cache@v3
        with:
          path: build/native/openvino_genai_windows_${{ env.OPENVINO_VERSION }}_x86_64
          key: openvino-runtime-${{ env.OPENVINO_VERSION }}

      - name: Download OpenVINO Runtime
        if: steps.cache-openvino-dll.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Downloading OpenVINO GenAI Runtime $env:OPENVINO_VERSION for DLL testing..."
          $outputPath = "build/native"
          New-Item -ItemType Directory -Force -Path $outputPath

          $url = "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/windows/openvino_genai_windows_${env:OPENVINO_VERSION}_x86_64.zip"
          $zipPath = "$outputPath/openvino_genai.zip"

          try {
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($url, $zipPath)
            $webClient.Dispose()
            
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $outputPath)
            Remove-Item $zipPath
            
            Write-Host "‚úì OpenVINO Runtime downloaded and extracted"
          }
          catch {
            Write-Host "‚ùå Error downloading OpenVINO runtime: $_"
            exit 1
          }

      - name: Build Custom DLL with Validation
        shell: pwsh
        run: |
          Write-Host "üî® Building and validating openvino_genai_c.dll..."

          # Set up build directory
          $buildDir = "build/native/wrapper"
          $openvinoPath = "build/native/openvino_genai_windows_${env:OPENVINO_VERSION}_x86_64"
          $targetPath = "build/native/runtimes/win-x64/native"

          New-Item -ItemType Directory -Force -Path $buildDir
          New-Item -ItemType Directory -Force -Path $targetPath

          # Set environment for CMake
          $env:OPENVINO_GENAI_ROOT = $openvinoPath

          Write-Host "üìã CMake Configuration..."
          cmake -S src/native -B $buildDir `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="$openvinoPath" `
            -DCMAKE_VERBOSE_MAKEFILE=ON

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå CMake configuration failed"
            exit 1
          }

          Write-Host "üèóÔ∏è Building wrapper..."
          cmake --build $buildDir --config Release --verbose

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Build failed"
            exit 1
          }

          # Validate DLL creation
          $dllPath = "$buildDir/Release/openvino_genai_c.dll"
          if (-not (Test-Path $dllPath)) {
            Write-Host "‚ùå DLL not found at expected location: $dllPath"
            Write-Host "üìÇ Build directory contents:"
            Get-ChildItem -Path $buildDir -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
            exit 1
          }

          # Check DLL properties
          $dllInfo = Get-Item $dllPath
          $dllSizeMB = [math]::Round($dllInfo.Length / 1MB, 2)
          Write-Host "‚úì DLL created successfully"
          Write-Host "  üìÅ Location: $dllPath"
          Write-Host "  üìä Size: $dllSizeMB MB"
          Write-Host "  üïí Modified: $($dllInfo.LastWriteTime)"

          # Validate DLL is not empty or corrupted
          if ($dllInfo.Length -lt 1KB) {
            Write-Host "‚ùå DLL appears to be too small ($(dllInfo.Length) bytes)"
            exit 1
          }

          # Copy to target directory
          Copy-Item $dllPath -Destination $targetPath -Force
          Write-Host "‚úì DLL copied to runtime directory: $targetPath"

      - name: Validate DLL Exports
        shell: pwsh
        run: |
          Write-Host "üîç Validating DLL exported functions..."

          $dllPath = "build/native/runtimes/win-x64/native/openvino_genai_c.dll"

          # Use dumpbin to check exports
          $dumpbinOutput = & dumpbin /exports $dllPath 2>&1

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Failed to analyze DLL exports"
            Write-Host $dumpbinOutput
            exit 1
          }

          # Check for key function exports
          $requiredFunctions = @(
            "ov_genai_llm_pipeline_create",
            "ov_genai_llm_pipeline_free", 
            "ov_genai_whisper_pipeline_create",
            "ov_genai_whisper_pipeline_free",
            "ov_genai_whisper_generation_config_create",
            "ov_genai_generation_config_create"
          )

          $exportedFunctions = $dumpbinOutput -split "`n" | Where-Object { $_ -match "^\s+\d+\s+[0-9A-F]+\s+[0-9A-F]+\s+(\w+)" } | ForEach-Object {
            if ($_ -match "^\s+\d+\s+[0-9A-F]+\s+[0-9A-F]+\s+(\w+)") {
              $matches[1]
            }
          }

          Write-Host "üìã Exported functions found:"
          $exportedFunctions | ForEach-Object { Write-Host "  ‚Ä¢ $_" }

          $missingFunctions = @()
          foreach ($func in $requiredFunctions) {
            if ($func -notin $exportedFunctions) {
              $missingFunctions += $func
            } else {
              Write-Host "‚úì Found required function: $func"
            }
          }

          if ($missingFunctions.Count -gt 0) {
            Write-Host "‚ùå Missing required functions:"
            $missingFunctions | ForEach-Object { Write-Host "  ‚ùå $_" }
            exit 1
          }

          Write-Host "‚úÖ All required functions exported successfully"

      - name: Test P/Invoke Integration
        shell: pwsh
        run: |
          Write-Host "üß™ Testing basic P/Invoke integration..."

          # Create test program using individual lines to avoid here-string issues
          @"
          using System;
          using System.Runtime.InteropServices;

          public static class DllTest 
          {
              private const string DllName = "openvino_genai_c";
              
              [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
              private static extern int ov_genai_llm_pipeline_create(IntPtr models_path, IntPtr device, UIntPtr property_args_size, out IntPtr pipe);
              
              [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]  
              private static extern void ov_genai_llm_pipeline_free(IntPtr pipe);
              
              [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
              private static extern int ov_genai_whisper_generation_config_create(out IntPtr config);
              
              [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
              private static extern void ov_genai_whisper_generation_config_free(IntPtr config);
              
              public static int Main()
              {
                  try 
                  {
                      Console.WriteLine("Testing P/Invoke function loading...");
                      
                      // Test Whisper config functions (simpler, no model required)
                      var result = ov_genai_whisper_generation_config_create(out var config);
                      Console.WriteLine("‚úì ov_genai_whisper_generation_config_create returned: " + result);
                      
                      if (config != IntPtr.Zero)
                      {
                          ov_genai_whisper_generation_config_free(config);
                          Console.WriteLine("‚úì ov_genai_whisper_generation_config_free called successfully");
                      }
                      
                      Console.WriteLine("‚úÖ Basic P/Invoke integration test passed");
                      return 0;
                  }
                  catch (Exception ex)
                  {
                      Console.WriteLine("‚ùå P/Invoke test failed: " + ex.Message);
                      return 1;
                  }
              }
          }
          "@ | Out-File -FilePath "DllTest.cs" -Encoding UTF8

          # Copy DLL to current directory for testing
          Copy-Item "build/native/runtimes/win-x64/native/openvino_genai_c.dll" -Destination "." -Force

          # Compile and run test
          Write-Host "üî® Compiling test program..."
          csc DllTest.cs

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Failed to compile test program"
            exit 1
          }

          Write-Host "üöÄ Running P/Invoke test..."
          ./DllTest.exe

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå P/Invoke test failed"
            exit 1
          }

      - name: Upload Custom DLL Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: custom-dll-x64
          path: |
            build/native/runtimes/win-x64/native/openvino_genai_c.dll
            build/native/wrapper/Release/openvino_genai_c.dll
          retention-days: 7

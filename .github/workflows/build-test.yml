name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: windows-latest
            runtime: win-x64

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore OpenVINO.NET.sln

    - name: Download OpenVINO Runtime (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Downloading OpenVINO GenAI Runtime for Windows..."
        
        # Try multiple potential URLs for robustness
        $urls = @(
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/windows/openvino_genai_windows_2025.2.0.0_x86_64.zip",
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/windows/openvino_genai_runtime_windows_2025.2.0.0_x86_64.zip"
        )
        
        $downloaded = $false
        $output = "openvino_genai_runtime.zip"
        
        foreach ($url in $urls) {
          Write-Host "Trying: $url"
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -UserAgent "OpenVINO.NET/1.0"
            
            # Verify the downloaded file is a valid ZIP
            if (Test-Path $output -PathType Leaf) {
              $fileInfo = Get-Item $output
              if ($fileInfo.Length -gt 1MB) {
                Write-Host "✓ Successfully downloaded from: $url"
                $downloaded = $true
                break
              } else {
                Write-Host "✗ Downloaded file too small: $($fileInfo.Length) bytes"
                Remove-Item $output -ErrorAction SilentlyContinue
              }
            }
          } catch {
            Write-Host "✗ Failed to download from: $url - $($_.Exception.Message)"
            Remove-Item $output -ErrorAction SilentlyContinue
          }
        }
        
        if (-not $downloaded) {
          Write-Host "❌ Failed to download OpenVINO runtime from any URL"
          exit 1
        }
        
        Write-Host "Extracting runtime..."
        Expand-Archive -Path $output -DestinationPath "temp_extract" -Force
        
        # Find the extracted directory (handle different naming conventions)
        $extractedDirs = Get-ChildItem -Path "temp_extract" -Directory | Where-Object { $_.Name -like "openvino_genai*" }
        
        if ($extractedDirs.Count -eq 0) {
          Write-Host "❌ Could not find extracted OpenVINO directory"
          Get-ChildItem -Path "temp_extract" | Format-Table
          exit 1
        }
        
        $extractedDir = $extractedDirs[0].FullName
        Write-Host "Found extracted directory: $($extractedDirs[0].Name)"
        
        # Create target directory and copy files
        New-Item -Path "build/native/runtimes/win-x64/native" -ItemType Directory -Force
        
        # Try different potential library paths
        if (Test-Path "$extractedDir/runtime/bin") {
          Copy-Item -Path "$extractedDir/runtime/bin/*" -Destination "build/native/runtimes/win-x64/native/" -Recurse -Force
        } elseif (Test-Path "$extractedDir/bin") {
          Copy-Item -Path "$extractedDir/bin/*" -Destination "build/native/runtimes/win-x64/native/" -Recurse -Force
        } else {
          Write-Host "❌ Could not find binary directory in extracted folder"
          Get-ChildItem -Path $extractedDir | Format-Table
          exit 1
        }
        
        Remove-Item -Path $output, "temp_extract" -Recurse -Force
        Write-Host "✓ OpenVINO runtime setup completed"

    - name: Download OpenVINO Runtime (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Downloading OpenVINO GenAI Runtime for Linux..."
        
        # Try multiple potential URLs for robustness
        urls=(
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/linux/openvino_genai_ubuntu24_2025.2.0.0_x86_64.tar.gz"
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/linux/openvino_genai_ubuntu22_2025.2.0.0_x86_64.tar.gz"
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/linux/openvino_genai_ubuntu20_2025.2.0.0_x86_64.tar.gz"
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/linux/openvino_genai_runtime_ubuntu24_2025.2.0.0_x86_64.tar.gz"
        )
        
        downloaded=false
        for url in "${urls[@]}"; do
          echo "Trying: $url"
          if wget -q --user-agent="OpenVINO.NET/1.0" -O openvino_genai_runtime.tar.gz "$url"; then
            # Verify the downloaded file is valid
            if file openvino_genai_runtime.tar.gz | grep -q "gzip compressed"; then
              echo "✓ Successfully downloaded from: $url"
              downloaded=true
              break
            else
              echo "✗ Invalid file format from: $url"
              rm -f openvino_genai_runtime.tar.gz
            fi
          else
            echo "✗ Failed to download from: $url"
          fi
        done
        
        if [ "$downloaded" = false ]; then
          echo "❌ Failed to download OpenVINO runtime from any URL"
          exit 1
        fi
        
        echo "Extracting runtime..."
        tar -xzf openvino_genai_runtime.tar.gz
        
        # Find the extracted directory (handle different naming conventions)
        extracted_dir=""
        for dir in openvino_genai_*; do
          if [ -d "$dir" ]; then
            extracted_dir="$dir"
            break
          fi
        done
        
        if [ -z "$extracted_dir" ]; then
          echo "❌ Could not find extracted OpenVINO directory"
          ls -la
          exit 1
        fi
        
        echo "Found extracted directory: $extracted_dir"
        
        # Create target directory and copy files preserving symlinks
        mkdir -p build/native/runtimes/linux-x64/native
        
        # Try different potential library paths
        if [ -d "$extracted_dir/runtime/lib/intel64" ]; then
          cp -a "$extracted_dir/runtime/lib/intel64/"* build/native/runtimes/linux-x64/native/
        elif [ -d "$extracted_dir/lib" ]; then
          cp -a "$extracted_dir/lib/"* build/native/runtimes/linux-x64/native/
        else
          echo "❌ Could not find library directory in $extracted_dir"
          ls -la "$extracted_dir"
          exit 1
        fi
        
        rm -rf openvino_genai_runtime.tar.gz "$extracted_dir"
        echo "✓ OpenVINO runtime setup completed"

    - name: Build solution
      run: dotnet build OpenVINO.NET.sln --configuration Release --no-restore

    - name: Set LD_LIBRARY_PATH for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        LIBRARY_PATH="$(pwd)/build/native/runtimes/linux-x64/native"
        echo "LD_LIBRARY_PATH=$LIBRARY_PATH:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "Setting LD_LIBRARY_PATH to: $LIBRARY_PATH"
        ls -la "$LIBRARY_PATH" | grep -E "(libtbb|libopenvino)" | head -10
      shell: bash

    - name: Run unit tests
      run: dotnet test tests/OpenVINO.NET.GenAI.Tests/OpenVINO.NET.GenAI.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.runtime }}
        path: ./coverage

    - name: Build artifacts
      run: dotnet publish samples/QuickDemo/QuickDemo.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained false --output ./artifacts/${{ matrix.runtime }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: quickdemo-${{ matrix.runtime }}
        path: ./artifacts/${{ matrix.runtime }}
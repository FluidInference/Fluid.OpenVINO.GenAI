name: Performance Benchmark

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of iterations'
        required: false
        default: '3'
        type: number
      model_name:
        description: 'Model to use for benchmarking'
        required: false
        default: 'FluidInference/qwen3-0.6b-int4-ov-npu'
        type: string

        
permissions:
  pull-requests: write
  issues: write

env:
  OPENVINO_VERSION: "2025.2.0.0"

jobs:
  benchmark:
    name: Performance Benchmark
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache Model
      uses: actions/cache@v4
      with:
        path: ./Models
        key: model-${{ inputs.model_name || 'FluidInference/qwen3-0.6b-int4-ov-npu' }}-v1
        restore-keys: |
          model-${{ inputs.model_name || 'FluidInference/qwen3-0.6b-int4-ov-npu' }}-



    - name: Restore dependencies
      run: dotnet restore OpenVINO.NET.sln

    - name: Cache OpenVINO Runtime
      id: cache-openvino-windows
      uses: actions/cache@v4
      with:
        path: build/native/runtimes/win-x64/native
        key: openvino-runtime-windows-${{ env.OPENVINO_VERSION }}

    - name: Download OpenVINO Runtime
      if: steps.cache-openvino-windows.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "Downloading OpenVINO GenAI Runtime for Windows..."
        
        # Try multiple potential URLs for robustness
        $urls = @(
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/windows/openvino_genai_windows_${{ env.OPENVINO_VERSION }}_x86_64.zip",
          "https://storage.openvinotoolkit.org/repositories/openvino_genai/packages/2025.2/windows/openvino_genai_runtime_windows_${{ env.OPENVINO_VERSION }}_x86_64.zip"
        )
        
        $downloaded = $false
        $output = "openvino_genai_runtime.zip"
        
        foreach ($url in $urls) {
          Write-Host "Trying: $url"
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -UserAgent "OpenVINO.NET/1.0"
            
            # Verify the downloaded file is a valid ZIP
            if (Test-Path $output -PathType Leaf) {
              $fileInfo = Get-Item $output
              if ($fileInfo.Length -gt 1MB) {
                Write-Host "✓ Successfully downloaded from: $url"
                $downloaded = $true
                break
              } else {
                Write-Host "✗ Downloaded file too small: $($fileInfo.Length) bytes"
                Remove-Item $output -ErrorAction SilentlyContinue
              }
            }
          } catch {
            Write-Host "✗ Failed to download from: $url - $($_.Exception.Message)"
            Remove-Item $output -ErrorAction SilentlyContinue
          }
        }
        
        if (-not $downloaded) {
          Write-Host "❌ Failed to download OpenVINO runtime from any URL"
          exit 1
        }
        
        Write-Host "Extracting runtime..."
        Expand-Archive -Path $output -DestinationPath "temp_extract" -Force
        
        # Find the extracted directory (handle different naming conventions)
        $extractedDirs = Get-ChildItem -Path "temp_extract" -Directory | Where-Object { $_.Name -like "openvino_genai*" }
        
        if ($extractedDirs.Count -eq 0) {
          Write-Host "❌ Could not find extracted OpenVINO directory"
          Get-ChildItem -Path "temp_extract" | Format-Table
          exit 1
        }
        
        $extractedDir = $extractedDirs[0].FullName
        Write-Host "Found extracted directory: $($extractedDirs[0].Name)"
        
        # Create target directory and copy files
        New-Item -Path "build/native/runtimes/win-x64/native" -ItemType Directory -Force
        
        # Try different potential library paths
        if (Test-Path "$extractedDir/runtime/bin") {
          Copy-Item -Path "$extractedDir/runtime/bin/*" -Destination "build/native/runtimes/win-x64/native/" -Recurse -Force
        } elseif (Test-Path "$extractedDir/bin") {
          Copy-Item -Path "$extractedDir/bin/*" -Destination "build/native/runtimes/win-x64/native/" -Recurse -Force
        } else {
          Write-Host "❌ Could not find binary directory in extracted folder"
          Get-ChildItem -Path $extractedDir | Format-Table
          exit 1
        }
        
        Remove-Item -Path $output, "temp_extract" -Recurse -Force
        Write-Host "✓ OpenVINO runtime setup completed"

    - name: Verify OpenVINO Runtime Installation
      shell: pwsh
      run: |
        Write-Host "Verifying OpenVINO Runtime Installation..."
        Write-Host "========================================"
        
        $runtimePath = "build/native/runtimes/win-x64/native"
        
        if (Test-Path $runtimePath) {
          Write-Host "✓ Runtime directory exists: $runtimePath"
          
          # List all files in the runtime directory
          Write-Host ""
          Write-Host "Files in runtime directory:"
          Get-ChildItem -Path $runtimePath -Recurse | Format-Table Name, Length, LastWriteTime
          
          # Check for specific required DLLs
          $requiredDlls = @("openvino_genai_c.dll", "openvino_c.dll")
          $missingDlls = @()
          
          foreach ($dll in $requiredDlls) {
            if (Test-Path "$runtimePath/$dll") {
              Write-Host "✓ Found required DLL: $dll"
            } else {
              Write-Host "✗ Missing required DLL: $dll"
              $missingDlls += $dll
            }
          }
          
          if ($missingDlls.Count -eq 0) {
            Write-Host ""
            Write-Host "✓ All required DLLs are present"
          } else {
            Write-Host ""
            Write-Host "❌ Missing DLLs: $($missingDlls -join ', ')"
            Write-Host "This will cause runtime failures"
          }
        } else {
          Write-Host "❌ Runtime directory not found: $runtimePath"
          exit 1
        }

    - name: Build solution
      run: dotnet build OpenVINO.NET.sln --configuration Release

    - name: Download Benchmark Model
      working-directory: ./samples/QuickDemo
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path "Models" -Force
        Set-Location Models
        
        # Use model name from input or default
        $MODEL_NAME = "${{ inputs.model_name || 'FluidInference/qwen3-0.6b-int4-ov-npu' }}"
        $MODEL_DIR = $MODEL_NAME.Split('/')[1]
        
        if ((-not (Test-Path $MODEL_DIR)) -or (-not (Test-Path "$MODEL_DIR/openvino_model.xml"))) {
          Write-Host "Downloading model: $MODEL_NAME"
          
          New-Item -ItemType Directory -Path $MODEL_DIR -Force
          Set-Location $MODEL_DIR
          
          # Download key files
          $files = @("openvino_model.xml", "openvino_model.bin", "openvino_tokenizer.xml", "openvino_tokenizer.bin", "openvino_detokenizer.xml", "openvino_detokenizer.bin", "config.json", "generation_config.json")
          
          foreach ($file in $files) {
            Write-Host "Downloading $file..."
            try {
              Invoke-WebRequest -Uri "https://huggingface.co/$MODEL_NAME/resolve/main/$file" -OutFile $file -UserAgent "OpenVINO.NET/1.0"
            } catch {
              Write-Host "Warning: Failed to download $file (may be optional)"
            }
          }
          
          Set-Location ..
          Write-Host "✓ Model download completed"
        } else {
          Write-Host "✓ Model already cached"
        }

    - name: Set Model Path Environment
      shell: pwsh
      run: |
        $MODEL_NAME = "${{ inputs.model_name || 'FluidInference/qwen3-0.6b-int4-ov-npu' }}"
        $MODEL_DIR = $MODEL_NAME.Split('/')[1]
        $MODEL_PATH = "$(Get-Location)/samples/QuickDemo/Models/$MODEL_DIR"
        "QUICKDEMO_MODEL_PATH=$MODEL_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Setup Environment for OpenVINO
      shell: pwsh
      run: |
        # Add OpenVINO runtime to PATH
        $runtimePath = "$(Get-Location)/build/native/runtimes/win-x64/native"
        $currentPath = $env:PATH
        $newPath = "$runtimePath;$currentPath"
        "PATH=$newPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        Write-Host "Added to PATH: $runtimePath"
        Write-Host "Verifying PATH update..."
        Write-Host "PATH now contains:"
        ($newPath -split ';') | ForEach-Object { Write-Host "  $_" }

    - name: Copy OpenVINO DLLs to Application Output
      shell: pwsh
      run: |
        # Copy DLLs to where the .NET application will look for them
        $sourceRuntimePath = "build/native/runtimes/win-x64/native"
        $targetPaths = @(
          "samples/QuickDemo/bin/Release/net8.0",
          "samples/QuickDemo/bin/Release/net8.0/runtimes/win-x64/native"
        )
        
        Write-Host "Copying OpenVINO DLLs to application output directories..."
        
        foreach ($targetPath in $targetPaths) {
          if (-not (Test-Path $targetPath)) {
            New-Item -ItemType Directory -Path $targetPath -Force
            Write-Host "Created directory: $targetPath"
          }
          
          Copy-Item -Path "$sourceRuntimePath/*" -Destination $targetPath -Recurse -Force
          Write-Host "✓ Copied DLLs to: $targetPath"
          
          # Verify the copy
          if (Test-Path "$targetPath/openvino_genai_c.dll") {
            Write-Host "  ✓ openvino_genai_c.dll verified in $targetPath"
          } else {
            Write-Host "  ✗ openvino_genai_c.dll NOT found in $targetPath"
          }
        }

    - name: Run Performance Benchmark
      working-directory: ./samples/QuickDemo
      shell: pwsh
      run: |
        # Debug environment before starting benchmark
        Write-Host "=== Environment Debug Information ==="
        Write-Host "Working Directory: $(Get-Location)"
        Write-Host "Model Path: $env:QUICKDEMO_MODEL_PATH"
        Write-Host "======================================"
        Write-Host ""
        
        # Determine number of iterations (default 3)
        $iterations = 3
        if ("${{ inputs.iterations }}" -ne "") {
          $iterations = [int]"${{ inputs.iterations }}"
        }
        
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        
        $allOutput = @()
        $allOutput += "# Performance Benchmark Results - Windows x64"
        $allOutput += ""
        $allOutput += "**Generated:** $timestamp"
        $allOutput += "**Platform:** win-x64"
        $allOutput += "**Iterations:** $iterations"
        $allOutput += ""
        $allOutput += "``````"
        
        for ($i = 1; $i -le $iterations; $i++) {
          Write-Host "Iteration $i/$iterations..."
          $startTime = Get-Date
          $output = dotnet run --configuration Release -- --device CPU 2>&1
          $endTime = Get-Date
          $exitCode = $LASTEXITCODE
          $elapsed = ($endTime - $startTime).TotalMilliseconds
          
          Write-Host $output
          Write-Host "Exit Code: $exitCode, Time: $($elapsed.ToString('F0'))ms"
          Write-Host ""
          
          $allOutput += "Iteration $i/$iterations (Exit Code: $exitCode, Time: $($elapsed.ToString('F0'))ms):"
          $allOutput += $output
          $allOutput += ""
        }
        
        $allOutput += "``````"
        
        # Save the output to file for PR comment
        $allOutput | Out-File -FilePath "benchmark-output.md" -Encoding UTF8
        Write-Host "Benchmark finished. Output saved to benchmark-output.md"

    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-win-x64
        path: ./samples/QuickDemo/benchmark-output.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('./samples/QuickDemo/benchmark-output.md')) {
            const summary = fs.readFileSync('./samples/QuickDemo/benchmark-output.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
